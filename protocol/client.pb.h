// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: client.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_client_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_client_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_client_2eproto;
namespace protocol {
namespace ncx_client {
class ConfigInfoReq;
struct ConfigInfoReqDefaultTypeInternal;
extern ConfigInfoReqDefaultTypeInternal _ConfigInfoReq_default_instance_;
class ConfigInfoResp;
struct ConfigInfoRespDefaultTypeInternal;
extern ConfigInfoRespDefaultTypeInternal _ConfigInfoResp_default_instance_;
class ServiceConfig;
struct ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
}  // namespace ncx_client
}  // namespace protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protocol {
namespace ncx_client {

// ===================================================================


// -------------------------------------------------------------------

class ServiceConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.ncx_client.ServiceConfig) */ {
 public:
  inline ServiceConfig() : ServiceConfig(nullptr) {}
  ~ServiceConfig() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServiceConfig(const ServiceConfig& from) : ServiceConfig(nullptr, from) {}
  inline ServiceConfig(ServiceConfig&& from) noexcept
      : ServiceConfig(nullptr, std::move(from)) {}
  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
        &_ServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ServiceConfig& a, ServiceConfig& b) { a.Swap(&b); }
  inline void Swap(ServiceConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServiceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServiceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServiceConfig& from) { ServiceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServiceConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.ncx_client.ServiceConfig"; }

 protected:
  explicit ServiceConfig(::google::protobuf::Arena* arena);
  ServiceConfig(::google::protobuf::Arena* arena, const ServiceConfig& from);
  ServiceConfig(::google::protobuf::Arena* arena, ServiceConfig&& from) noexcept
      : ServiceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceIpFieldNumber = 2,
    kServerIpFieldNumber = 4,
    kServicePortFieldNumber = 3,
    kServerPortFieldNumber = 5,
    kProxyPortFieldNumber = 6,
  };
  // string service_name = 1;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // string service_ip = 2;
  void clear_service_ip() ;
  const std::string& service_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_ip(Arg_&& arg, Args_... args);
  std::string* mutable_service_ip();
  PROTOBUF_NODISCARD std::string* release_service_ip();
  void set_allocated_service_ip(std::string* value);

  private:
  const std::string& _internal_service_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_ip(
      const std::string& value);
  std::string* _internal_mutable_service_ip();

  public:
  // string server_ip = 4;
  void clear_server_ip() ;
  const std::string& server_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_ip(Arg_&& arg, Args_... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* value);

  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(
      const std::string& value);
  std::string* _internal_mutable_server_ip();

  public:
  // int32 service_port = 3;
  void clear_service_port() ;
  ::int32_t service_port() const;
  void set_service_port(::int32_t value);

  private:
  ::int32_t _internal_service_port() const;
  void _internal_set_service_port(::int32_t value);

  public:
  // int32 server_port = 5;
  void clear_server_port() ;
  ::int32_t server_port() const;
  void set_server_port(::int32_t value);

  private:
  ::int32_t _internal_server_port() const;
  void _internal_set_server_port(::int32_t value);

  public:
  // int32 proxy_port = 6;
  void clear_proxy_port() ;
  ::int32_t proxy_port() const;
  void set_proxy_port(::int32_t value);

  private:
  ::int32_t _internal_proxy_port() const;
  void _internal_set_proxy_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.ncx_client.ServiceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      73, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ServiceConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServiceConfig& from_msg);
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr service_ip_;
    ::google::protobuf::internal::ArenaStringPtr server_ip_;
    ::int32_t service_port_;
    ::int32_t server_port_;
    ::int32_t proxy_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ConfigInfoReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.ncx_client.ConfigInfoReq) */ {
 public:
  inline ConfigInfoReq() : ConfigInfoReq(nullptr) {}
  ~ConfigInfoReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigInfoReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfigInfoReq(const ConfigInfoReq& from) : ConfigInfoReq(nullptr, from) {}
  inline ConfigInfoReq(ConfigInfoReq&& from) noexcept
      : ConfigInfoReq(nullptr, std::move(from)) {}
  inline ConfigInfoReq& operator=(const ConfigInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigInfoReq& operator=(ConfigInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigInfoReq* internal_default_instance() {
    return reinterpret_cast<const ConfigInfoReq*>(
        &_ConfigInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConfigInfoReq& a, ConfigInfoReq& b) { a.Swap(&b); }
  inline void Swap(ConfigInfoReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigInfoReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigInfoReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ConfigInfoReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigInfoReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigInfoReq& from) { ConfigInfoReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConfigInfoReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.ncx_client.ConfigInfoReq"; }

 protected:
  explicit ConfigInfoReq(::google::protobuf::Arena* arena);
  ConfigInfoReq(::google::protobuf::Arena* arena, const ConfigInfoReq& from);
  ConfigInfoReq(::google::protobuf::Arena* arena, ConfigInfoReq&& from) noexcept
      : ConfigInfoReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:protocol.ncx_client.ConfigInfoReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ConfigInfoReq_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfigInfoReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class ConfigInfoResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.ncx_client.ConfigInfoResp) */ {
 public:
  inline ConfigInfoResp() : ConfigInfoResp(nullptr) {}
  ~ConfigInfoResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigInfoResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConfigInfoResp(const ConfigInfoResp& from) : ConfigInfoResp(nullptr, from) {}
  inline ConfigInfoResp(ConfigInfoResp&& from) noexcept
      : ConfigInfoResp(nullptr, std::move(from)) {}
  inline ConfigInfoResp& operator=(const ConfigInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigInfoResp& operator=(ConfigInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigInfoResp* internal_default_instance() {
    return reinterpret_cast<const ConfigInfoResp*>(
        &_ConfigInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ConfigInfoResp& a, ConfigInfoResp& b) { a.Swap(&b); }
  inline void Swap(ConfigInfoResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigInfoResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigInfoResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ConfigInfoResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigInfoResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConfigInfoResp& from) { ConfigInfoResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConfigInfoResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.ncx_client.ConfigInfoResp"; }

 protected:
  explicit ConfigInfoResp(::google::protobuf::Arena* arena);
  ConfigInfoResp(::google::protobuf::Arena* arena, const ConfigInfoResp& from);
  ConfigInfoResp(::google::protobuf::Arena* arena, ConfigInfoResp&& from) noexcept
      : ConfigInfoResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceConfigsFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .protocol.ncx_client.ServiceConfig service_configs = 2;
  int service_configs_size() const;
  private:
  int _internal_service_configs_size() const;

  public:
  void clear_service_configs() ;
  ::protocol::ncx_client::ServiceConfig* mutable_service_configs(int index);
  ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>* mutable_service_configs();

  private:
  const ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>& _internal_service_configs() const;
  ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>* _internal_mutable_service_configs();
  public:
  const ::protocol::ncx_client::ServiceConfig& service_configs(int index) const;
  ::protocol::ncx_client::ServiceConfig* add_service_configs();
  const ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>& service_configs() const;
  // int32 code = 1;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.ncx_client.ConfigInfoResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ConfigInfoResp_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConfigInfoResp& from_msg);
    ::google::protobuf::RepeatedPtrField< ::protocol::ncx_client::ServiceConfig > service_configs_;
    ::int32_t code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConfigInfoReq

// string token = 1;
inline void ConfigInfoReq::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ConfigInfoReq::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ConfigInfoReq.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigInfoReq::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ConfigInfoReq.token)
}
inline std::string* ConfigInfoReq::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:protocol.ncx_client.ConfigInfoReq.token)
  return _s;
}
inline const std::string& ConfigInfoReq::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void ConfigInfoReq::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* ConfigInfoReq::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* ConfigInfoReq::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.ncx_client.ConfigInfoReq.token)
  return _impl_.token_.Release();
}
inline void ConfigInfoReq::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ncx_client.ConfigInfoReq.token)
}

// -------------------------------------------------------------------

// ServiceConfig

// string service_name = 1;
inline void ServiceConfig::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& ServiceConfig::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.service_name)
}
inline std::string* ServiceConfig::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:protocol.ncx_client.ServiceConfig.service_name)
  return _s;
}
inline const std::string& ServiceConfig::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void ServiceConfig::_internal_set_service_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.ncx_client.ServiceConfig.service_name)
  return _impl_.service_name_.Release();
}
inline void ServiceConfig::set_allocated_service_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ncx_client.ServiceConfig.service_name)
}

// string service_ip = 2;
inline void ServiceConfig::clear_service_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ip_.ClearToEmpty();
}
inline const std::string& ServiceConfig::service_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.service_ip)
  return _internal_service_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_service_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.service_ip)
}
inline std::string* ServiceConfig::mutable_service_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_ip();
  // @@protoc_insertion_point(field_mutable:protocol.ncx_client.ServiceConfig.service_ip)
  return _s;
}
inline const std::string& ServiceConfig::_internal_service_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_ip_.Get();
}
inline void ServiceConfig::_internal_set_service_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ip_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_service_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_ip_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_service_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.ncx_client.ServiceConfig.service_ip)
  return _impl_.service_ip_.Release();
}
inline void ServiceConfig::set_allocated_service_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_ip_.IsDefault()) {
          _impl_.service_ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ncx_client.ServiceConfig.service_ip)
}

// int32 service_port = 3;
inline void ServiceConfig::clear_service_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_port_ = 0;
}
inline ::int32_t ServiceConfig::service_port() const {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.service_port)
  return _internal_service_port();
}
inline void ServiceConfig::set_service_port(::int32_t value) {
  _internal_set_service_port(value);
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.service_port)
}
inline ::int32_t ServiceConfig::_internal_service_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_port_;
}
inline void ServiceConfig::_internal_set_service_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_port_ = value;
}

// string server_ip = 4;
inline void ServiceConfig::clear_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& ServiceConfig::server_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.server_ip)
  return _internal_server_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_server_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.server_ip)
}
inline std::string* ServiceConfig::mutable_server_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:protocol.ncx_client.ServiceConfig.server_ip)
  return _s;
}
inline const std::string& ServiceConfig::_internal_server_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_ip_.Get();
}
inline void ServiceConfig::_internal_set_server_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_ip_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.ncx_client.ServiceConfig.server_ip)
  return _impl_.server_ip_.Release();
}
inline void ServiceConfig::set_allocated_server_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_ip_.IsDefault()) {
          _impl_.server_ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.ncx_client.ServiceConfig.server_ip)
}

// int32 server_port = 5;
inline void ServiceConfig::clear_server_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_ = 0;
}
inline ::int32_t ServiceConfig::server_port() const {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.server_port)
  return _internal_server_port();
}
inline void ServiceConfig::set_server_port(::int32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.server_port)
}
inline ::int32_t ServiceConfig::_internal_server_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_port_;
}
inline void ServiceConfig::_internal_set_server_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_ = value;
}

// int32 proxy_port = 6;
inline void ServiceConfig::clear_proxy_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proxy_port_ = 0;
}
inline ::int32_t ServiceConfig::proxy_port() const {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ServiceConfig.proxy_port)
  return _internal_proxy_port();
}
inline void ServiceConfig::set_proxy_port(::int32_t value) {
  _internal_set_proxy_port(value);
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ServiceConfig.proxy_port)
}
inline ::int32_t ServiceConfig::_internal_proxy_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proxy_port_;
}
inline void ServiceConfig::_internal_set_proxy_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proxy_port_ = value;
}

// -------------------------------------------------------------------

// ConfigInfoResp

// int32 code = 1;
inline void ConfigInfoResp::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
}
inline ::int32_t ConfigInfoResp::code() const {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ConfigInfoResp.code)
  return _internal_code();
}
inline void ConfigInfoResp::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.ncx_client.ConfigInfoResp.code)
}
inline ::int32_t ConfigInfoResp::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void ConfigInfoResp::_internal_set_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// repeated .protocol.ncx_client.ServiceConfig service_configs = 2;
inline int ConfigInfoResp::_internal_service_configs_size() const {
  return _internal_service_configs().size();
}
inline int ConfigInfoResp::service_configs_size() const {
  return _internal_service_configs_size();
}
inline void ConfigInfoResp::clear_service_configs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_configs_.Clear();
}
inline ::protocol::ncx_client::ServiceConfig* ConfigInfoResp::mutable_service_configs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protocol.ncx_client.ConfigInfoResp.service_configs)
  return _internal_mutable_service_configs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>* ConfigInfoResp::mutable_service_configs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protocol.ncx_client.ConfigInfoResp.service_configs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_service_configs();
}
inline const ::protocol::ncx_client::ServiceConfig& ConfigInfoResp::service_configs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.ncx_client.ConfigInfoResp.service_configs)
  return _internal_service_configs().Get(index);
}
inline ::protocol::ncx_client::ServiceConfig* ConfigInfoResp::add_service_configs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::protocol::ncx_client::ServiceConfig* _add = _internal_mutable_service_configs()->Add();
  // @@protoc_insertion_point(field_add:protocol.ncx_client.ConfigInfoResp.service_configs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>& ConfigInfoResp::service_configs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protocol.ncx_client.ConfigInfoResp.service_configs)
  return _internal_service_configs();
}
inline const ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>&
ConfigInfoResp::_internal_service_configs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_configs_;
}
inline ::google::protobuf::RepeatedPtrField<::protocol::ncx_client::ServiceConfig>*
ConfigInfoResp::_internal_mutable_service_configs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.service_configs_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ncx_client
}  // namespace protocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_client_2eproto_2epb_2eh
