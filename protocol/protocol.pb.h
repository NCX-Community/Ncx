// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protocol.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protocol_2eproto;
namespace protocol {
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class ControlChannelCmd;
struct ControlChannelCmdDefaultTypeInternal;
extern ControlChannelCmdDefaultTypeInternal _ControlChannelCmd_default_instance_;
class DataChannelCmd;
struct DataChannelCmdDefaultTypeInternal;
extern DataChannelCmdDefaultTypeInternal _DataChannelCmd_default_instance_;
class Hello;
struct HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
class Hello_Control_Channel_Hello_Content;
struct Hello_Control_Channel_Hello_ContentDefaultTypeInternal;
extern Hello_Control_Channel_Hello_ContentDefaultTypeInternal _Hello_Control_Channel_Hello_Content_default_instance_;
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protocol {
enum Hello_HelloType : int {
  Hello_HelloType_CONTROL_CHANNEL_HELLO = 0,
  Hello_HelloType_DATA_CHANNEL_HELLO = 1,
  Hello_HelloType_Hello_HelloType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Hello_HelloType_Hello_HelloType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Hello_HelloType_IsValid(int value);
extern const uint32_t Hello_HelloType_internal_data_[];
constexpr Hello_HelloType Hello_HelloType_HelloType_MIN = static_cast<Hello_HelloType>(0);
constexpr Hello_HelloType Hello_HelloType_HelloType_MAX = static_cast<Hello_HelloType>(1);
constexpr int Hello_HelloType_HelloType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Hello_HelloType_descriptor();
template <typename T>
const std::string& Hello_HelloType_Name(T value) {
  static_assert(std::is_same<T, Hello_HelloType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HelloType_Name().");
  return Hello_HelloType_Name(static_cast<Hello_HelloType>(value));
}
template <>
inline const std::string& Hello_HelloType_Name(Hello_HelloType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Hello_HelloType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Hello_HelloType_Parse(absl::string_view name, Hello_HelloType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hello_HelloType>(
      Hello_HelloType_descriptor(), name, value);
}
enum Ack_AckContent : int {
  Ack_AckContent_OK = 0,
  Ack_AckContent_AUTH_ERROR = 1,
  Ack_AckContent_Ack_AckContent_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Ack_AckContent_Ack_AckContent_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Ack_AckContent_IsValid(int value);
extern const uint32_t Ack_AckContent_internal_data_[];
constexpr Ack_AckContent Ack_AckContent_AckContent_MIN = static_cast<Ack_AckContent>(0);
constexpr Ack_AckContent Ack_AckContent_AckContent_MAX = static_cast<Ack_AckContent>(1);
constexpr int Ack_AckContent_AckContent_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Ack_AckContent_descriptor();
template <typename T>
const std::string& Ack_AckContent_Name(T value) {
  static_assert(std::is_same<T, Ack_AckContent>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AckContent_Name().");
  return Ack_AckContent_Name(static_cast<Ack_AckContent>(value));
}
template <>
inline const std::string& Ack_AckContent_Name(Ack_AckContent value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Ack_AckContent_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Ack_AckContent_Parse(absl::string_view name, Ack_AckContent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ack_AckContent>(
      Ack_AckContent_descriptor(), name, value);
}
enum ControlChannelCmd_CCmd : int {
  ControlChannelCmd_CCmd_CREATE_DATA_CHANNEL = 0,
  ControlChannelCmd_CCmd_HEARTBEAT = 1,
  ControlChannelCmd_CCmd_ControlChannelCmd_CCmd_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ControlChannelCmd_CCmd_ControlChannelCmd_CCmd_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ControlChannelCmd_CCmd_IsValid(int value);
extern const uint32_t ControlChannelCmd_CCmd_internal_data_[];
constexpr ControlChannelCmd_CCmd ControlChannelCmd_CCmd_CCmd_MIN = static_cast<ControlChannelCmd_CCmd>(0);
constexpr ControlChannelCmd_CCmd ControlChannelCmd_CCmd_CCmd_MAX = static_cast<ControlChannelCmd_CCmd>(1);
constexpr int ControlChannelCmd_CCmd_CCmd_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ControlChannelCmd_CCmd_descriptor();
template <typename T>
const std::string& ControlChannelCmd_CCmd_Name(T value) {
  static_assert(std::is_same<T, ControlChannelCmd_CCmd>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CCmd_Name().");
  return ControlChannelCmd_CCmd_Name(static_cast<ControlChannelCmd_CCmd>(value));
}
template <>
inline const std::string& ControlChannelCmd_CCmd_Name(ControlChannelCmd_CCmd value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ControlChannelCmd_CCmd_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ControlChannelCmd_CCmd_Parse(absl::string_view name, ControlChannelCmd_CCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlChannelCmd_CCmd>(
      ControlChannelCmd_CCmd_descriptor(), name, value);
}
enum DataChannelCmd_DCmd : int {
  DataChannelCmd_DCmd_START_FORWARD_TCP = 0,
  DataChannelCmd_DCmd_START_FORWARD_UDP = 1,
  DataChannelCmd_DCmd_DataChannelCmd_DCmd_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataChannelCmd_DCmd_DataChannelCmd_DCmd_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DataChannelCmd_DCmd_IsValid(int value);
extern const uint32_t DataChannelCmd_DCmd_internal_data_[];
constexpr DataChannelCmd_DCmd DataChannelCmd_DCmd_DCmd_MIN = static_cast<DataChannelCmd_DCmd>(0);
constexpr DataChannelCmd_DCmd DataChannelCmd_DCmd_DCmd_MAX = static_cast<DataChannelCmd_DCmd>(1);
constexpr int DataChannelCmd_DCmd_DCmd_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
DataChannelCmd_DCmd_descriptor();
template <typename T>
const std::string& DataChannelCmd_DCmd_Name(T value) {
  static_assert(std::is_same<T, DataChannelCmd_DCmd>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DCmd_Name().");
  return DataChannelCmd_DCmd_Name(static_cast<DataChannelCmd_DCmd>(value));
}
template <>
inline const std::string& DataChannelCmd_DCmd_Name(DataChannelCmd_DCmd value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataChannelCmd_DCmd_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool DataChannelCmd_DCmd_Parse(absl::string_view name, DataChannelCmd_DCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataChannelCmd_DCmd>(
      DataChannelCmd_DCmd_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MessageHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageHeader(const MessageHeader& from) : MessageHeader(nullptr, from) {}
  inline MessageHeader(MessageHeader&& from) noexcept
      : MessageHeader(nullptr, std::move(from)) {}
  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
        &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessageHeader& a, MessageHeader& b) { a.Swap(&b); }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MessageHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageHeader& from) { MessageHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.MessageHeader"; }

 protected:
  explicit MessageHeader(::google::protobuf::Arena* arena);
  MessageHeader(::google::protobuf::Arena* arena, const MessageHeader& from);
  MessageHeader(::google::protobuf::Arena* arena, MessageHeader&& from) noexcept
      : MessageHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageLengthFieldNumber = 1,
  };
  // fixed32 message_length = 1;
  void clear_message_length() ;
  ::uint32_t message_length() const;
  void set_message_length(::uint32_t value);

  private:
  ::uint32_t _internal_message_length() const;
  void _internal_set_message_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.MessageHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MessageHeader_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageHeader& from_msg);
    ::uint32_t message_length_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Hello_Control_Channel_Hello_Content final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.Hello.Control_Channel_Hello_Content) */ {
 public:
  inline Hello_Control_Channel_Hello_Content() : Hello_Control_Channel_Hello_Content(nullptr) {}
  ~Hello_Control_Channel_Hello_Content() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Hello_Control_Channel_Hello_Content(
      ::google::protobuf::internal::ConstantInitialized);

  inline Hello_Control_Channel_Hello_Content(const Hello_Control_Channel_Hello_Content& from) : Hello_Control_Channel_Hello_Content(nullptr, from) {}
  inline Hello_Control_Channel_Hello_Content(Hello_Control_Channel_Hello_Content&& from) noexcept
      : Hello_Control_Channel_Hello_Content(nullptr, std::move(from)) {}
  inline Hello_Control_Channel_Hello_Content& operator=(const Hello_Control_Channel_Hello_Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hello_Control_Channel_Hello_Content& operator=(Hello_Control_Channel_Hello_Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hello_Control_Channel_Hello_Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hello_Control_Channel_Hello_Content* internal_default_instance() {
    return reinterpret_cast<const Hello_Control_Channel_Hello_Content*>(
        &_Hello_Control_Channel_Hello_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Hello_Control_Channel_Hello_Content& a, Hello_Control_Channel_Hello_Content& b) { a.Swap(&b); }
  inline void Swap(Hello_Control_Channel_Hello_Content* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hello_Control_Channel_Hello_Content* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hello_Control_Channel_Hello_Content* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Hello_Control_Channel_Hello_Content>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Hello_Control_Channel_Hello_Content& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Hello_Control_Channel_Hello_Content& from) { Hello_Control_Channel_Hello_Content::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Hello_Control_Channel_Hello_Content* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.Hello.Control_Channel_Hello_Content"; }

 protected:
  explicit Hello_Control_Channel_Hello_Content(::google::protobuf::Arena* arena);
  Hello_Control_Channel_Hello_Content(::google::protobuf::Arena* arena, const Hello_Control_Channel_Hello_Content& from);
  Hello_Control_Channel_Hello_Content(::google::protobuf::Arena* arena, Hello_Control_Channel_Hello_Content&& from) noexcept
      : Hello_Control_Channel_Hello_Content(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceNameFieldNumber = 1,
    kProxyPortFieldNumber = 2,
  };
  // optional string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // optional int32 proxy_port = 2;
  bool has_proxy_port() const;
  void clear_proxy_port() ;
  ::int32_t proxy_port() const;
  void set_proxy_port(::int32_t value);

  private:
  ::int32_t _internal_proxy_port() const;
  void _internal_set_proxy_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.Hello.Control_Channel_Hello_Content)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Hello_Control_Channel_Hello_Content_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Hello_Control_Channel_Hello_Content& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::int32_t proxy_port_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class DataChannelCmd final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.DataChannelCmd) */ {
 public:
  inline DataChannelCmd() : DataChannelCmd(nullptr) {}
  ~DataChannelCmd() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataChannelCmd(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataChannelCmd(const DataChannelCmd& from) : DataChannelCmd(nullptr, from) {}
  inline DataChannelCmd(DataChannelCmd&& from) noexcept
      : DataChannelCmd(nullptr, std::move(from)) {}
  inline DataChannelCmd& operator=(const DataChannelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChannelCmd& operator=(DataChannelCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataChannelCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataChannelCmd* internal_default_instance() {
    return reinterpret_cast<const DataChannelCmd*>(
        &_DataChannelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(DataChannelCmd& a, DataChannelCmd& b) { a.Swap(&b); }
  inline void Swap(DataChannelCmd* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChannelCmd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataChannelCmd* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataChannelCmd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataChannelCmd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataChannelCmd& from) { DataChannelCmd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataChannelCmd* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.DataChannelCmd"; }

 protected:
  explicit DataChannelCmd(::google::protobuf::Arena* arena);
  DataChannelCmd(::google::protobuf::Arena* arena, const DataChannelCmd& from);
  DataChannelCmd(::google::protobuf::Arena* arena, DataChannelCmd&& from) noexcept
      : DataChannelCmd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DCmd = DataChannelCmd_DCmd;
  static constexpr DCmd START_FORWARD_TCP = DataChannelCmd_DCmd_START_FORWARD_TCP;
  static constexpr DCmd START_FORWARD_UDP = DataChannelCmd_DCmd_START_FORWARD_UDP;
  static inline bool DCmd_IsValid(int value) {
    return DataChannelCmd_DCmd_IsValid(value);
  }
  static constexpr DCmd DCmd_MIN = DataChannelCmd_DCmd_DCmd_MIN;
  static constexpr DCmd DCmd_MAX = DataChannelCmd_DCmd_DCmd_MAX;
  static constexpr int DCmd_ARRAYSIZE = DataChannelCmd_DCmd_DCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DCmd_descriptor() {
    return DataChannelCmd_DCmd_descriptor();
  }
  template <typename T>
  static inline const std::string& DCmd_Name(T value) {
    return DataChannelCmd_DCmd_Name(value);
  }
  static inline bool DCmd_Parse(absl::string_view name, DCmd* value) {
    return DataChannelCmd_DCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDataChannelCmdFieldNumber = 1,
  };
  // optional .protocol.DataChannelCmd.DCmd data_channel_cmd = 1;
  bool has_data_channel_cmd() const;
  void clear_data_channel_cmd() ;
  ::protocol::DataChannelCmd_DCmd data_channel_cmd() const;
  void set_data_channel_cmd(::protocol::DataChannelCmd_DCmd value);

  private:
  ::protocol::DataChannelCmd_DCmd _internal_data_channel_cmd() const;
  void _internal_set_data_channel_cmd(::protocol::DataChannelCmd_DCmd value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.DataChannelCmd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataChannelCmd_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataChannelCmd& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int data_channel_cmd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ControlChannelCmd final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.ControlChannelCmd) */ {
 public:
  inline ControlChannelCmd() : ControlChannelCmd(nullptr) {}
  ~ControlChannelCmd() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlChannelCmd(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlChannelCmd(const ControlChannelCmd& from) : ControlChannelCmd(nullptr, from) {}
  inline ControlChannelCmd(ControlChannelCmd&& from) noexcept
      : ControlChannelCmd(nullptr, std::move(from)) {}
  inline ControlChannelCmd& operator=(const ControlChannelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlChannelCmd& operator=(ControlChannelCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlChannelCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlChannelCmd* internal_default_instance() {
    return reinterpret_cast<const ControlChannelCmd*>(
        &_ControlChannelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ControlChannelCmd& a, ControlChannelCmd& b) { a.Swap(&b); }
  inline void Swap(ControlChannelCmd* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlChannelCmd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlChannelCmd* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ControlChannelCmd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlChannelCmd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlChannelCmd& from) { ControlChannelCmd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControlChannelCmd* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.ControlChannelCmd"; }

 protected:
  explicit ControlChannelCmd(::google::protobuf::Arena* arena);
  ControlChannelCmd(::google::protobuf::Arena* arena, const ControlChannelCmd& from);
  ControlChannelCmd(::google::protobuf::Arena* arena, ControlChannelCmd&& from) noexcept
      : ControlChannelCmd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CCmd = ControlChannelCmd_CCmd;
  static constexpr CCmd CREATE_DATA_CHANNEL = ControlChannelCmd_CCmd_CREATE_DATA_CHANNEL;
  static constexpr CCmd HEARTBEAT = ControlChannelCmd_CCmd_HEARTBEAT;
  static inline bool CCmd_IsValid(int value) {
    return ControlChannelCmd_CCmd_IsValid(value);
  }
  static constexpr CCmd CCmd_MIN = ControlChannelCmd_CCmd_CCmd_MIN;
  static constexpr CCmd CCmd_MAX = ControlChannelCmd_CCmd_CCmd_MAX;
  static constexpr int CCmd_ARRAYSIZE = ControlChannelCmd_CCmd_CCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CCmd_descriptor() {
    return ControlChannelCmd_CCmd_descriptor();
  }
  template <typename T>
  static inline const std::string& CCmd_Name(T value) {
    return ControlChannelCmd_CCmd_Name(value);
  }
  static inline bool CCmd_Parse(absl::string_view name, CCmd* value) {
    return ControlChannelCmd_CCmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kControlChannelCmdFieldNumber = 1,
  };
  // optional .protocol.ControlChannelCmd.CCmd control_channel_cmd = 1;
  bool has_control_channel_cmd() const;
  void clear_control_channel_cmd() ;
  ::protocol::ControlChannelCmd_CCmd control_channel_cmd() const;
  void set_control_channel_cmd(::protocol::ControlChannelCmd_CCmd value);

  private:
  ::protocol::ControlChannelCmd_CCmd _internal_control_channel_cmd() const;
  void _internal_set_control_channel_cmd(::protocol::ControlChannelCmd_CCmd value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.ControlChannelCmd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControlChannelCmd_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlChannelCmd& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int control_channel_cmd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Ack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ack(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ack(const Ack& from) : Ack(nullptr, from) {}
  inline Ack(Ack&& from) noexcept
      : Ack(nullptr, std::move(from)) {}
  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
        &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Ack& a, Ack& b) { a.Swap(&b); }
  inline void Swap(Ack* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Ack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ack& from) { Ack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Ack* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.Ack"; }

 protected:
  explicit Ack(::google::protobuf::Arena* arena);
  Ack(::google::protobuf::Arena* arena, const Ack& from);
  Ack(::google::protobuf::Arena* arena, Ack&& from) noexcept
      : Ack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using AckContent = Ack_AckContent;
  static constexpr AckContent OK = Ack_AckContent_OK;
  static constexpr AckContent AUTH_ERROR = Ack_AckContent_AUTH_ERROR;
  static inline bool AckContent_IsValid(int value) {
    return Ack_AckContent_IsValid(value);
  }
  static constexpr AckContent AckContent_MIN = Ack_AckContent_AckContent_MIN;
  static constexpr AckContent AckContent_MAX = Ack_AckContent_AckContent_MAX;
  static constexpr int AckContent_ARRAYSIZE = Ack_AckContent_AckContent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AckContent_descriptor() {
    return Ack_AckContent_descriptor();
  }
  template <typename T>
  static inline const std::string& AckContent_Name(T value) {
    return Ack_AckContent_Name(value);
  }
  static inline bool AckContent_Parse(absl::string_view name, AckContent* value) {
    return Ack_AckContent_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kAckContentFieldNumber = 1,
  };
  // optional .protocol.Ack.AckContent ack_content = 1;
  bool has_ack_content() const;
  void clear_ack_content() ;
  ::protocol::Ack_AckContent ack_content() const;
  void set_ack_content(::protocol::Ack_AckContent value);

  private:
  ::protocol::Ack_AckContent _internal_ack_content() const;
  void _internal_set_ack_content(::protocol::Ack_AckContent value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.Ack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Ack_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ack& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int ack_content_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Hello final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protocol.Hello) */ {
 public:
  inline Hello() : Hello(nullptr) {}
  ~Hello() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Hello(
      ::google::protobuf::internal::ConstantInitialized);

  inline Hello(const Hello& from) : Hello(nullptr, from) {}
  inline Hello(Hello&& from) noexcept
      : Hello(nullptr, std::move(from)) {}
  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hello& operator=(Hello&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hello& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
        &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Hello& a, Hello& b) { a.Swap(&b); }
  inline void Swap(Hello* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hello* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hello* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Hello>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Hello& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Hello& from) { Hello::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Hello* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protocol.Hello"; }

 protected:
  explicit Hello(::google::protobuf::Arena* arena);
  Hello(::google::protobuf::Arena* arena, const Hello& from);
  Hello(::google::protobuf::Arena* arena, Hello&& from) noexcept
      : Hello(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Control_Channel_Hello_Content = Hello_Control_Channel_Hello_Content;
  using HelloType = Hello_HelloType;
  static constexpr HelloType CONTROL_CHANNEL_HELLO = Hello_HelloType_CONTROL_CHANNEL_HELLO;
  static constexpr HelloType DATA_CHANNEL_HELLO = Hello_HelloType_DATA_CHANNEL_HELLO;
  static inline bool HelloType_IsValid(int value) {
    return Hello_HelloType_IsValid(value);
  }
  static constexpr HelloType HelloType_MIN = Hello_HelloType_HelloType_MIN;
  static constexpr HelloType HelloType_MAX = Hello_HelloType_HelloType_MAX;
  static constexpr int HelloType_ARRAYSIZE = Hello_HelloType_HelloType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* HelloType_descriptor() {
    return Hello_HelloType_descriptor();
  }
  template <typename T>
  static inline const std::string& HelloType_Name(T value) {
    return Hello_HelloType_Name(value);
  }
  static inline bool HelloType_Parse(absl::string_view name, HelloType* value) {
    return Hello_HelloType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDigestFieldNumber = 2,
    kControlChannelHelloContentFieldNumber = 3,
    kHelloTypeFieldNumber = 1,
  };
  // optional string digest = 2;
  bool has_digest() const;
  void clear_digest() ;
  const std::string& digest() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_digest(Arg_&& arg, Args_... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* value);

  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(
      const std::string& value);
  std::string* _internal_mutable_digest();

  public:
  // optional .protocol.Hello.Control_Channel_Hello_Content control_channel_hello_content = 3;
  bool has_control_channel_hello_content() const;
  void clear_control_channel_hello_content() ;
  const ::protocol::Hello_Control_Channel_Hello_Content& control_channel_hello_content() const;
  PROTOBUF_NODISCARD ::protocol::Hello_Control_Channel_Hello_Content* release_control_channel_hello_content();
  ::protocol::Hello_Control_Channel_Hello_Content* mutable_control_channel_hello_content();
  void set_allocated_control_channel_hello_content(::protocol::Hello_Control_Channel_Hello_Content* value);
  void unsafe_arena_set_allocated_control_channel_hello_content(::protocol::Hello_Control_Channel_Hello_Content* value);
  ::protocol::Hello_Control_Channel_Hello_Content* unsafe_arena_release_control_channel_hello_content();

  private:
  const ::protocol::Hello_Control_Channel_Hello_Content& _internal_control_channel_hello_content() const;
  ::protocol::Hello_Control_Channel_Hello_Content* _internal_mutable_control_channel_hello_content();

  public:
  // optional .protocol.Hello.HelloType hello_type = 1;
  bool has_hello_type() const;
  void clear_hello_type() ;
  ::protocol::Hello_HelloType hello_type() const;
  void set_hello_type(::protocol::Hello_HelloType value);

  private:
  ::protocol::Hello_HelloType _internal_hello_type() const;
  void _internal_set_hello_type(::protocol::Hello_HelloType value);

  public:
  // @@protoc_insertion_point(class_scope:protocol.Hello)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      29, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Hello_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Hello& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr digest_;
    ::protocol::Hello_Control_Channel_Hello_Content* control_channel_hello_content_;
    int hello_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageHeader

// fixed32 message_length = 1;
inline void MessageHeader::clear_message_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_length_ = 0u;
}
inline ::uint32_t MessageHeader::message_length() const {
  // @@protoc_insertion_point(field_get:protocol.MessageHeader.message_length)
  return _internal_message_length();
}
inline void MessageHeader::set_message_length(::uint32_t value) {
  _internal_set_message_length(value);
  // @@protoc_insertion_point(field_set:protocol.MessageHeader.message_length)
}
inline ::uint32_t MessageHeader::_internal_message_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_length_;
}
inline void MessageHeader::_internal_set_message_length(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_length_ = value;
}

// -------------------------------------------------------------------

// Hello_Control_Channel_Hello_Content

// optional string service_name = 1;
inline bool Hello_Control_Channel_Hello_Content::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Hello_Control_Channel_Hello_Content::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Hello_Control_Channel_Hello_Content::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Hello.Control_Channel_Hello_Content.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Hello_Control_Channel_Hello_Content::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.Hello.Control_Channel_Hello_Content.service_name)
}
inline std::string* Hello_Control_Channel_Hello_Content::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.Control_Channel_Hello_Content.service_name)
  return _s;
}
inline const std::string& Hello_Control_Channel_Hello_Content::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void Hello_Control_Channel_Hello_Content::_internal_set_service_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* Hello_Control_Channel_Hello_Content::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* Hello_Control_Channel_Hello_Content::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.Hello.Control_Channel_Hello_Content.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Hello_Control_Channel_Hello_Content::set_allocated_service_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.Control_Channel_Hello_Content.service_name)
}

// optional int32 proxy_port = 2;
inline bool Hello_Control_Channel_Hello_Content::has_proxy_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Hello_Control_Channel_Hello_Content::clear_proxy_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proxy_port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Hello_Control_Channel_Hello_Content::proxy_port() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.Control_Channel_Hello_Content.proxy_port)
  return _internal_proxy_port();
}
inline void Hello_Control_Channel_Hello_Content::set_proxy_port(::int32_t value) {
  _internal_set_proxy_port(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:protocol.Hello.Control_Channel_Hello_Content.proxy_port)
}
inline ::int32_t Hello_Control_Channel_Hello_Content::_internal_proxy_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.proxy_port_;
}
inline void Hello_Control_Channel_Hello_Content::_internal_set_proxy_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.proxy_port_ = value;
}

// -------------------------------------------------------------------

// Hello

// optional .protocol.Hello.HelloType hello_type = 1;
inline bool Hello::has_hello_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Hello::clear_hello_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hello_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::Hello_HelloType Hello::hello_type() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.hello_type)
  return _internal_hello_type();
}
inline void Hello::set_hello_type(::protocol::Hello_HelloType value) {
  _internal_set_hello_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:protocol.Hello.hello_type)
}
inline ::protocol::Hello_HelloType Hello::_internal_hello_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protocol::Hello_HelloType>(_impl_.hello_type_);
}
inline void Hello::_internal_set_hello_type(::protocol::Hello_HelloType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hello_type_ = value;
}

// optional string digest = 2;
inline bool Hello::has_digest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Hello::clear_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digest_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Hello::digest() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Hello.digest)
  return _internal_digest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Hello::set_digest(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digest_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protocol.Hello.digest)
}
inline std::string* Hello::mutable_digest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.digest)
  return _s;
}
inline const std::string& Hello::_internal_digest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.digest_.Get();
}
inline void Hello::_internal_set_digest(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digest_.Set(value, GetArena());
}
inline std::string* Hello::_internal_mutable_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.digest_.Mutable( GetArena());
}
inline std::string* Hello::release_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.Hello.digest)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.digest_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.digest_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Hello::set_allocated_digest(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.digest_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.digest_.IsDefault()) {
          _impl_.digest_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.digest)
}

// optional .protocol.Hello.Control_Channel_Hello_Content control_channel_hello_content = 3;
inline bool Hello::has_control_channel_hello_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_channel_hello_content_ != nullptr);
  return value;
}
inline void Hello::clear_control_channel_hello_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_channel_hello_content_ != nullptr) _impl_.control_channel_hello_content_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::protocol::Hello_Control_Channel_Hello_Content& Hello::_internal_control_channel_hello_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::protocol::Hello_Control_Channel_Hello_Content* p = _impl_.control_channel_hello_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Hello_Control_Channel_Hello_Content&>(::protocol::_Hello_Control_Channel_Hello_Content_default_instance_);
}
inline const ::protocol::Hello_Control_Channel_Hello_Content& Hello::control_channel_hello_content() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protocol.Hello.control_channel_hello_content)
  return _internal_control_channel_hello_content();
}
inline void Hello::unsafe_arena_set_allocated_control_channel_hello_content(::protocol::Hello_Control_Channel_Hello_Content* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_channel_hello_content_);
  }
  _impl_.control_channel_hello_content_ = reinterpret_cast<::protocol::Hello_Control_Channel_Hello_Content*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Hello.control_channel_hello_content)
}
inline ::protocol::Hello_Control_Channel_Hello_Content* Hello::release_control_channel_hello_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protocol::Hello_Control_Channel_Hello_Content* released = _impl_.control_channel_hello_content_;
  _impl_.control_channel_hello_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protocol::Hello_Control_Channel_Hello_Content* Hello::unsafe_arena_release_control_channel_hello_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protocol.Hello.control_channel_hello_content)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protocol::Hello_Control_Channel_Hello_Content* temp = _impl_.control_channel_hello_content_;
  _impl_.control_channel_hello_content_ = nullptr;
  return temp;
}
inline ::protocol::Hello_Control_Channel_Hello_Content* Hello::_internal_mutable_control_channel_hello_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_channel_hello_content_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protocol::Hello_Control_Channel_Hello_Content>(GetArena());
    _impl_.control_channel_hello_content_ = reinterpret_cast<::protocol::Hello_Control_Channel_Hello_Content*>(p);
  }
  return _impl_.control_channel_hello_content_;
}
inline ::protocol::Hello_Control_Channel_Hello_Content* Hello::mutable_control_channel_hello_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::protocol::Hello_Control_Channel_Hello_Content* _msg = _internal_mutable_control_channel_hello_content();
  // @@protoc_insertion_point(field_mutable:protocol.Hello.control_channel_hello_content)
  return _msg;
}
inline void Hello::set_allocated_control_channel_hello_content(::protocol::Hello_Control_Channel_Hello_Content* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.control_channel_hello_content_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.control_channel_hello_content_ = reinterpret_cast<::protocol::Hello_Control_Channel_Hello_Content*>(value);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.control_channel_hello_content)
}

// -------------------------------------------------------------------

// Ack

// optional .protocol.Ack.AckContent ack_content = 1;
inline bool Ack::has_ack_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ack::clear_ack_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ack_content_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::Ack_AckContent Ack::ack_content() const {
  // @@protoc_insertion_point(field_get:protocol.Ack.ack_content)
  return _internal_ack_content();
}
inline void Ack::set_ack_content(::protocol::Ack_AckContent value) {
  _internal_set_ack_content(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protocol.Ack.ack_content)
}
inline ::protocol::Ack_AckContent Ack::_internal_ack_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protocol::Ack_AckContent>(_impl_.ack_content_);
}
inline void Ack::_internal_set_ack_content(::protocol::Ack_AckContent value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ack_content_ = value;
}

// -------------------------------------------------------------------

// ControlChannelCmd

// optional .protocol.ControlChannelCmd.CCmd control_channel_cmd = 1;
inline bool ControlChannelCmd::has_control_channel_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ControlChannelCmd::clear_control_channel_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_channel_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::ControlChannelCmd_CCmd ControlChannelCmd::control_channel_cmd() const {
  // @@protoc_insertion_point(field_get:protocol.ControlChannelCmd.control_channel_cmd)
  return _internal_control_channel_cmd();
}
inline void ControlChannelCmd::set_control_channel_cmd(::protocol::ControlChannelCmd_CCmd value) {
  _internal_set_control_channel_cmd(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protocol.ControlChannelCmd.control_channel_cmd)
}
inline ::protocol::ControlChannelCmd_CCmd ControlChannelCmd::_internal_control_channel_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protocol::ControlChannelCmd_CCmd>(_impl_.control_channel_cmd_);
}
inline void ControlChannelCmd::_internal_set_control_channel_cmd(::protocol::ControlChannelCmd_CCmd value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_channel_cmd_ = value;
}

// -------------------------------------------------------------------

// DataChannelCmd

// optional .protocol.DataChannelCmd.DCmd data_channel_cmd = 1;
inline bool DataChannelCmd::has_data_channel_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DataChannelCmd::clear_data_channel_cmd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_channel_cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::DataChannelCmd_DCmd DataChannelCmd::data_channel_cmd() const {
  // @@protoc_insertion_point(field_get:protocol.DataChannelCmd.data_channel_cmd)
  return _internal_data_channel_cmd();
}
inline void DataChannelCmd::set_data_channel_cmd(::protocol::DataChannelCmd_DCmd value) {
  _internal_set_data_channel_cmd(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:protocol.DataChannelCmd.data_channel_cmd)
}
inline ::protocol::DataChannelCmd_DCmd DataChannelCmd::_internal_data_channel_cmd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::protocol::DataChannelCmd_DCmd>(_impl_.data_channel_cmd_);
}
inline void DataChannelCmd::_internal_set_data_channel_cmd(::protocol::DataChannelCmd_DCmd value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_channel_cmd_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protocol::Hello_HelloType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protocol::Hello_HelloType>() {
  return ::protocol::Hello_HelloType_descriptor();
}
template <>
struct is_proto_enum<::protocol::Ack_AckContent> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protocol::Ack_AckContent>() {
  return ::protocol::Ack_AckContent_descriptor();
}
template <>
struct is_proto_enum<::protocol::ControlChannelCmd_CCmd> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protocol::ControlChannelCmd_CCmd>() {
  return ::protocol::ControlChannelCmd_CCmd_descriptor();
}
template <>
struct is_proto_enum<::protocol::DataChannelCmd_DCmd> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protocol::DataChannelCmd_DCmd>() {
  return ::protocol::DataChannelCmd_DCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto_2epb_2eh
