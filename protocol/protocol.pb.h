// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace ncx {
class ControlChannelCmd;
class ControlChannelCmdDefaultTypeInternal;
extern ControlChannelCmdDefaultTypeInternal _ControlChannelCmd_default_instance_;
class DataChannelCmd;
class DataChannelCmdDefaultTypeInternal;
extern DataChannelCmdDefaultTypeInternal _DataChannelCmd_default_instance_;
class Hello;
class HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
}  // namespace ncx
PROTOBUF_NAMESPACE_OPEN
template<> ::ncx::ControlChannelCmd* Arena::CreateMaybeMessage<::ncx::ControlChannelCmd>(Arena*);
template<> ::ncx::DataChannelCmd* Arena::CreateMaybeMessage<::ncx::DataChannelCmd>(Arena*);
template<> ::ncx::Hello* Arena::CreateMaybeMessage<::ncx::Hello>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ncx {

enum ControlChannelCmd_cmd : int {
  ControlChannelCmd_cmd_CreateDataChannel = 0,
  ControlChannelCmd_cmd_HeartBeat = 1,
  ControlChannelCmd_cmd_ControlChannelCmd_cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlChannelCmd_cmd_ControlChannelCmd_cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlChannelCmd_cmd_IsValid(int value);
constexpr ControlChannelCmd_cmd ControlChannelCmd_cmd_cmd_MIN = ControlChannelCmd_cmd_CreateDataChannel;
constexpr ControlChannelCmd_cmd ControlChannelCmd_cmd_cmd_MAX = ControlChannelCmd_cmd_HeartBeat;
constexpr int ControlChannelCmd_cmd_cmd_ARRAYSIZE = ControlChannelCmd_cmd_cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlChannelCmd_cmd_descriptor();
template<typename T>
inline const std::string& ControlChannelCmd_cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlChannelCmd_cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlChannelCmd_cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlChannelCmd_cmd_descriptor(), enum_t_value);
}
inline bool ControlChannelCmd_cmd_Parse(
    const std::string& name, ControlChannelCmd_cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlChannelCmd_cmd>(
    ControlChannelCmd_cmd_descriptor(), name, value);
}
enum DataChannelCmd_cmd : int {
  DataChannelCmd_cmd_StartForwardTcp = 0,
  DataChannelCmd_cmd_StartForwardUdp = 1,
  DataChannelCmd_cmd_DataChannelCmd_cmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataChannelCmd_cmd_DataChannelCmd_cmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataChannelCmd_cmd_IsValid(int value);
constexpr DataChannelCmd_cmd DataChannelCmd_cmd_cmd_MIN = DataChannelCmd_cmd_StartForwardTcp;
constexpr DataChannelCmd_cmd DataChannelCmd_cmd_cmd_MAX = DataChannelCmd_cmd_StartForwardUdp;
constexpr int DataChannelCmd_cmd_cmd_ARRAYSIZE = DataChannelCmd_cmd_cmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChannelCmd_cmd_descriptor();
template<typename T>
inline const std::string& DataChannelCmd_cmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataChannelCmd_cmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataChannelCmd_cmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataChannelCmd_cmd_descriptor(), enum_t_value);
}
inline bool DataChannelCmd_cmd_Parse(
    const std::string& name, DataChannelCmd_cmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataChannelCmd_cmd>(
    DataChannelCmd_cmd_descriptor(), name, value);
}
enum Hello_helloType : int {
  Hello_helloType_ControlChannelHello = 0,
  Hello_helloType_DataChannelHello = 1,
  Hello_helloType_Hello_helloType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Hello_helloType_Hello_helloType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Hello_helloType_IsValid(int value);
constexpr Hello_helloType Hello_helloType_helloType_MIN = Hello_helloType_ControlChannelHello;
constexpr Hello_helloType Hello_helloType_helloType_MAX = Hello_helloType_DataChannelHello;
constexpr int Hello_helloType_helloType_ARRAYSIZE = Hello_helloType_helloType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hello_helloType_descriptor();
template<typename T>
inline const std::string& Hello_helloType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Hello_helloType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Hello_helloType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Hello_helloType_descriptor(), enum_t_value);
}
inline bool Hello_helloType_Parse(
    const std::string& name, Hello_helloType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Hello_helloType>(
    Hello_helloType_descriptor(), name, value);
}
// ===================================================================

class ControlChannelCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ncx.ControlChannelCmd) */ {
 public:
  inline ControlChannelCmd() : ControlChannelCmd(nullptr) {};
  virtual ~ControlChannelCmd();

  ControlChannelCmd(const ControlChannelCmd& from);
  ControlChannelCmd(ControlChannelCmd&& from) noexcept
    : ControlChannelCmd() {
    *this = ::std::move(from);
  }

  inline ControlChannelCmd& operator=(const ControlChannelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlChannelCmd& operator=(ControlChannelCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlChannelCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlChannelCmd* internal_default_instance() {
    return reinterpret_cast<const ControlChannelCmd*>(
               &_ControlChannelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlChannelCmd& a, ControlChannelCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlChannelCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlChannelCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlChannelCmd* New() const final {
    return CreateMaybeMessage<ControlChannelCmd>(nullptr);
  }

  ControlChannelCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlChannelCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlChannelCmd& from);
  void MergeFrom(const ControlChannelCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlChannelCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ncx.ControlChannelCmd";
  }
  protected:
  explicit ControlChannelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControlChannelCmd_cmd cmd;
  static constexpr cmd CreateDataChannel =
    ControlChannelCmd_cmd_CreateDataChannel;
  static constexpr cmd HeartBeat =
    ControlChannelCmd_cmd_HeartBeat;
  static inline bool cmd_IsValid(int value) {
    return ControlChannelCmd_cmd_IsValid(value);
  }
  static constexpr cmd cmd_MIN =
    ControlChannelCmd_cmd_cmd_MIN;
  static constexpr cmd cmd_MAX =
    ControlChannelCmd_cmd_cmd_MAX;
  static constexpr int cmd_ARRAYSIZE =
    ControlChannelCmd_cmd_cmd_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  cmd_descriptor() {
    return ControlChannelCmd_cmd_descriptor();
  }
  template<typename T>
  static inline const std::string& cmd_Name(T enum_t_value) {
    static_assert(::std::is_same<T, cmd>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function cmd_Name.");
    return ControlChannelCmd_cmd_Name(enum_t_value);
  }
  static inline bool cmd_Parse(const std::string& name,
      cmd* value) {
    return ControlChannelCmd_cmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ncx.ControlChannelCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class DataChannelCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ncx.DataChannelCmd) */ {
 public:
  inline DataChannelCmd() : DataChannelCmd(nullptr) {};
  virtual ~DataChannelCmd();

  DataChannelCmd(const DataChannelCmd& from);
  DataChannelCmd(DataChannelCmd&& from) noexcept
    : DataChannelCmd() {
    *this = ::std::move(from);
  }

  inline DataChannelCmd& operator=(const DataChannelCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChannelCmd& operator=(DataChannelCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataChannelCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataChannelCmd* internal_default_instance() {
    return reinterpret_cast<const DataChannelCmd*>(
               &_DataChannelCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataChannelCmd& a, DataChannelCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(DataChannelCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChannelCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataChannelCmd* New() const final {
    return CreateMaybeMessage<DataChannelCmd>(nullptr);
  }

  DataChannelCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataChannelCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataChannelCmd& from);
  void MergeFrom(const DataChannelCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataChannelCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ncx.DataChannelCmd";
  }
  protected:
  explicit DataChannelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DataChannelCmd_cmd cmd;
  static constexpr cmd StartForwardTcp =
    DataChannelCmd_cmd_StartForwardTcp;
  static constexpr cmd StartForwardUdp =
    DataChannelCmd_cmd_StartForwardUdp;
  static inline bool cmd_IsValid(int value) {
    return DataChannelCmd_cmd_IsValid(value);
  }
  static constexpr cmd cmd_MIN =
    DataChannelCmd_cmd_cmd_MIN;
  static constexpr cmd cmd_MAX =
    DataChannelCmd_cmd_cmd_MAX;
  static constexpr int cmd_ARRAYSIZE =
    DataChannelCmd_cmd_cmd_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  cmd_descriptor() {
    return DataChannelCmd_cmd_descriptor();
  }
  template<typename T>
  static inline const std::string& cmd_Name(T enum_t_value) {
    static_assert(::std::is_same<T, cmd>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function cmd_Name.");
    return DataChannelCmd_cmd_Name(enum_t_value);
  }
  static inline bool cmd_Parse(const std::string& name,
      cmd* value) {
    return DataChannelCmd_cmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ncx.DataChannelCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Hello PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ncx.Hello) */ {
 public:
  inline Hello() : Hello(nullptr) {};
  virtual ~Hello();

  Hello(const Hello& from);
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hello& operator=(Hello&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(Hello* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hello* New() const final {
    return CreateMaybeMessage<Hello>(nullptr);
  }

  Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ncx.Hello";
  }
  protected:
  explicit Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Hello_helloType helloType;
  static constexpr helloType ControlChannelHello =
    Hello_helloType_ControlChannelHello;
  static constexpr helloType DataChannelHello =
    Hello_helloType_DataChannelHello;
  static inline bool helloType_IsValid(int value) {
    return Hello_helloType_IsValid(value);
  }
  static constexpr helloType helloType_MIN =
    Hello_helloType_helloType_MIN;
  static constexpr helloType helloType_MAX =
    Hello_helloType_helloType_MAX;
  static constexpr int helloType_ARRAYSIZE =
    Hello_helloType_helloType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  helloType_descriptor() {
    return Hello_helloType_descriptor();
  }
  template<typename T>
  static inline const std::string& helloType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, helloType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function helloType_Name.");
    return Hello_helloType_Name(enum_t_value);
  }
  static inline bool helloType_Parse(const std::string& name,
      helloType* value) {
    return Hello_helloType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ncx.Hello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlChannelCmd

// -------------------------------------------------------------------

// DataChannelCmd

// -------------------------------------------------------------------

// Hello

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncx

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ncx::ControlChannelCmd_cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ncx::ControlChannelCmd_cmd>() {
  return ::ncx::ControlChannelCmd_cmd_descriptor();
}
template <> struct is_proto_enum< ::ncx::DataChannelCmd_cmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ncx::DataChannelCmd_cmd>() {
  return ::ncx::DataChannelCmd_cmd_descriptor();
}
template <> struct is_proto_enum< ::ncx::Hello_helloType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ncx::Hello_helloType>() {
  return ::ncx::Hello_helloType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
