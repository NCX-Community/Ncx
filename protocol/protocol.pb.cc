// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ncx {
class ControlChannelCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlChannelCmd> _instance;
} _ControlChannelCmd_default_instance_;
class DataChannelCmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataChannelCmd> _instance;
} _DataChannelCmd_default_instance_;
class HelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hello> _instance;
} _Hello_default_instance_;
}  // namespace ncx
static void InitDefaultsscc_info_ControlChannelCmd_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ncx::_ControlChannelCmd_default_instance_;
    new (ptr) ::ncx::ControlChannelCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ncx::ControlChannelCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlChannelCmd_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlChannelCmd_protocol_2eproto}, {}};

static void InitDefaultsscc_info_DataChannelCmd_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ncx::_DataChannelCmd_default_instance_;
    new (ptr) ::ncx::DataChannelCmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ncx::DataChannelCmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataChannelCmd_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataChannelCmd_protocol_2eproto}, {}};

static void InitDefaultsscc_info_Hello_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ncx::_Hello_default_instance_;
    new (ptr) ::ncx::Hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ncx::Hello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hello_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hello_protocol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ncx::ControlChannelCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ncx::DataChannelCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ncx::Hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ncx::ControlChannelCmd)},
  { 5, -1, sizeof(::ncx::DataChannelCmd)},
  { 10, -1, sizeof(::ncx::Hello)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ncx::_ControlChannelCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ncx::_DataChannelCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ncx::_Hello_default_instance_),
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\003ncx\"@\n\021ControlChannelC"
  "md\"+\n\003cmd\022\025\n\021CreateDataChannel\020\000\022\r\n\tHear"
  "tBeat\020\001\"A\n\016DataChannelCmd\"/\n\003cmd\022\023\n\017Star"
  "tForwardTcp\020\000\022\023\n\017StartForwardUdp\020\001\"C\n\005He"
  "llo\":\n\thelloType\022\027\n\023ControlChannelHello\020"
  "\000\022\024\n\020DataChannelHello\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2eproto_sccs[3] = {
  &scc_info_ControlChannelCmd_protocol_2eproto.base,
  &scc_info_DataChannelCmd_protocol_2eproto.base,
  &scc_info_Hello_protocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto = {
  false, false, descriptor_table_protodef_protocol_2eproto, "protocol.proto", 231,
  &descriptor_table_protocol_2eproto_once, descriptor_table_protocol_2eproto_sccs, descriptor_table_protocol_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
  file_level_metadata_protocol_2eproto, 3, file_level_enum_descriptors_protocol_2eproto, file_level_service_descriptors_protocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2eproto)), true);
namespace ncx {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlChannelCmd_cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[0];
}
bool ControlChannelCmd_cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlChannelCmd_cmd ControlChannelCmd::CreateDataChannel;
constexpr ControlChannelCmd_cmd ControlChannelCmd::HeartBeat;
constexpr ControlChannelCmd_cmd ControlChannelCmd::cmd_MIN;
constexpr ControlChannelCmd_cmd ControlChannelCmd::cmd_MAX;
constexpr int ControlChannelCmd::cmd_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChannelCmd_cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[1];
}
bool DataChannelCmd_cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataChannelCmd_cmd DataChannelCmd::StartForwardTcp;
constexpr DataChannelCmd_cmd DataChannelCmd::StartForwardUdp;
constexpr DataChannelCmd_cmd DataChannelCmd::cmd_MIN;
constexpr DataChannelCmd_cmd DataChannelCmd::cmd_MAX;
constexpr int DataChannelCmd::cmd_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Hello_helloType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[2];
}
bool Hello_helloType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Hello_helloType Hello::ControlChannelHello;
constexpr Hello_helloType Hello::DataChannelHello;
constexpr Hello_helloType Hello::helloType_MIN;
constexpr Hello_helloType Hello::helloType_MAX;
constexpr int Hello::helloType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ControlChannelCmd::InitAsDefaultInstance() {
}
class ControlChannelCmd::_Internal {
 public:
};

ControlChannelCmd::ControlChannelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ncx.ControlChannelCmd)
}
ControlChannelCmd::ControlChannelCmd(const ControlChannelCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ncx.ControlChannelCmd)
}

void ControlChannelCmd::SharedCtor() {
}

ControlChannelCmd::~ControlChannelCmd() {
  // @@protoc_insertion_point(destructor:ncx.ControlChannelCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlChannelCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ControlChannelCmd::ArenaDtor(void* object) {
  ControlChannelCmd* _this = reinterpret_cast< ControlChannelCmd* >(object);
  (void)_this;
}
void ControlChannelCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlChannelCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlChannelCmd& ControlChannelCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlChannelCmd_protocol_2eproto.base);
  return *internal_default_instance();
}


void ControlChannelCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ncx.ControlChannelCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlChannelCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlChannelCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ncx.ControlChannelCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ncx.ControlChannelCmd)
  return target;
}

size_t ControlChannelCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ncx.ControlChannelCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlChannelCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ncx.ControlChannelCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlChannelCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlChannelCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ncx.ControlChannelCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ncx.ControlChannelCmd)
    MergeFrom(*source);
  }
}

void ControlChannelCmd::MergeFrom(const ControlChannelCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ncx.ControlChannelCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ControlChannelCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ncx.ControlChannelCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlChannelCmd::CopyFrom(const ControlChannelCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ncx.ControlChannelCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlChannelCmd::IsInitialized() const {
  return true;
}

void ControlChannelCmd::InternalSwap(ControlChannelCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlChannelCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataChannelCmd::InitAsDefaultInstance() {
}
class DataChannelCmd::_Internal {
 public:
};

DataChannelCmd::DataChannelCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ncx.DataChannelCmd)
}
DataChannelCmd::DataChannelCmd(const DataChannelCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ncx.DataChannelCmd)
}

void DataChannelCmd::SharedCtor() {
}

DataChannelCmd::~DataChannelCmd() {
  // @@protoc_insertion_point(destructor:ncx.DataChannelCmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataChannelCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DataChannelCmd::ArenaDtor(void* object) {
  DataChannelCmd* _this = reinterpret_cast< DataChannelCmd* >(object);
  (void)_this;
}
void DataChannelCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChannelCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataChannelCmd& DataChannelCmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataChannelCmd_protocol_2eproto.base);
  return *internal_default_instance();
}


void DataChannelCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:ncx.DataChannelCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChannelCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataChannelCmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ncx.DataChannelCmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ncx.DataChannelCmd)
  return target;
}

size_t DataChannelCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ncx.DataChannelCmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataChannelCmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ncx.DataChannelCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const DataChannelCmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataChannelCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ncx.DataChannelCmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ncx.DataChannelCmd)
    MergeFrom(*source);
  }
}

void DataChannelCmd::MergeFrom(const DataChannelCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ncx.DataChannelCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DataChannelCmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ncx.DataChannelCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataChannelCmd::CopyFrom(const DataChannelCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ncx.DataChannelCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannelCmd::IsInitialized() const {
  return true;
}

void DataChannelCmd::InternalSwap(DataChannelCmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChannelCmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hello::InitAsDefaultInstance() {
}
class Hello::_Internal {
 public:
};

Hello::Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ncx.Hello)
}
Hello::Hello(const Hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ncx.Hello)
}

void Hello::SharedCtor() {
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:ncx.Hello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hello::ArenaDtor(void* object) {
  Hello* _this = reinterpret_cast< Hello* >(object);
  (void)_this;
}
void Hello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hello& Hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hello_protocol_2eproto.base);
  return *internal_default_instance();
}


void Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:ncx.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ncx.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ncx.Hello)
  return target;
}

size_t Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ncx.Hello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ncx.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  const Hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ncx.Hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ncx.Hello)
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ncx.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ncx.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ncx.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  return true;
}

void Hello::InternalSwap(Hello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hello::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ncx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ncx::ControlChannelCmd* Arena::CreateMaybeMessage< ::ncx::ControlChannelCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ncx::ControlChannelCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::ncx::DataChannelCmd* Arena::CreateMaybeMessage< ::ncx::DataChannelCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ncx::DataChannelCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::ncx::Hello* Arena::CreateMaybeMessage< ::ncx::Hello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ncx::Hello >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
